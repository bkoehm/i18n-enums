import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository

buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails:grails-docs:${project.ext.properties.grailsDocsVersion ?: grailsVersion}"
        classpath 'io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1'
        classpath "io.github.gradle-nexus:publish-plugin:$gradlePublishPlugin"
    }
}

plugins {
    id "com.adarshr.test-logger" version "2.0.0"
    id 'io.github.gradle-nexus.publish-plugin' version "${gradlePublishPlugin}"
}

version project.projectVersion

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

ext {
    isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    isReleaseVersion = !isBuildSnapshot
}

subprojects {

    version rootProject.version

    ext {
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
        isReleaseVersion = !isBuildSnapshot
    }

    apply plugin: 'groovy'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
        testlogger {
            theme 'mocha'
        }
    }
}

if (project.isReleaseVersion) {
    nexusPublishing {
        repositories {
            sonatype {
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
                def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
                nexusUrl = uri("https://oss.sonatype.org/service/local/")
                snapshotRepositoryUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
                username = ossUser
                password = ossPass
                stagingProfileId = ossStagingProfileId
            }
        }
    }
}

//do not generate extra load on Nexus with new staging repository if signing fails or if not a release version
tasks.withType(InitializeNexusStagingRepository).configureEach {
    onlyIf { isReleaseVersion }
    shouldRunAfter(tasks.withType(Sign))
}

tasks.register('snapshotVersion') {
    doLast {
        if (!isBuildSnapshot) {
            ant.propertyfile(file: "gradle.properties") {
                entry(key: "version", value: "${project.version}-SNAPSHOT")
            }
        }
    }
}
